/*
 * MIT License
 *
 * Copyright (c) 2020 Freayd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
var listSheet      = getOrCreateSheet_('List');
var executionSheet = getOrCreateSheet_('Execution');
var menuName = 'Google Drive files';
var listRow;
var executionData;
var executionRowByFolderId;
var executionStart;
var executionMode;

function getOrCreateSheet_(name) {
  return spreadsheet.getSheetByName(name) || spreadsheet.insertSheet(name);
}

function onOpen(e) {
  SpreadsheetApp.getUi()
      .createMenu(menuName)
      .addItem('List files (4-minute limit)',                   'listOnce')
      .addItem('List files with triggers (1-hour daily limit)', 'listWithTriggers')
      .addItem('Reset triggers',                                'resetTriggers')
      .addItem('Reset list',                                    'reset')
      .addToUi();
}

function listOnce() {
  executionMode = Mode.ONCE;
  list_();
}

function listWithTriggers() {
  executionMode = Mode.TRIGGERS;
  list_();
}

function resetTriggers() {
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    ScriptApp.deleteTrigger(triggers[i]);
  }
}

function reset() {
  listSheet.getDataRange().offset(1, 0).clearContent();
  executionSheet.getDataRange().offset(2, 0).clearContent();
  resetTriggers();
}

function list_() {
  executionStart = new Date();

  listSheet.getRange('1:1').clearContent();
  listSheet.getRange('A1:M1').setValues([
    [
      'Folder',
      'File',
      'Sharing access',
      'Sharing permission',
      'Owner',
      'Contributors',
      'Editors',
      'Viewers',
      'Creation time',
      'Modification time',
      'Size',
      'URL',
      'Type',
    ]
  ]);
  listSheet.setFrozenRows(1);
  listSheet.getRange('K:K2').setNumberFormat('[<1000000]0.00," kB";[<1000000000]0.00,," MB";0.00,,," GB"');
  listRow = listSheet.getDataRange().getLastRow();

  executionSheet.getRange('1:2').clearContent();
  executionSheet.getRange('A1').setValue(
    `The sheets "${listSheet.getName()}" and "${executionSheet.getName()}" are automatically generated by a script. Use the menu "${menuName}" to run the script.`
  );
  executionSheet.getRange('A2:D2').setValues([
    [
      'Folder',
      'ID',
      'Status',
      'Time',
    ]
  ]);
  executionSheet.setFrozenRows(2);
  executionData = executionSheet.getDataRange().getValues();
  executionData.splice(0, 2);
  executionRowByFolderId = new Map();
  for (var i = 0; i < executionData.length; i++) {
    executionRowByFolderId.set(executionData[i][1], i);
  }

  var finished = listFolder_(DriveApp.getRootFolder(), '');
  if (finished) {
    Logger.log('Finished!');
    if (executionMode == Mode.TRIGGERS) {
      Logger.log('resetTriggers()');
      resetTriggers();
    }
  } else {
    Logger.log("Time's up!");
    if (executionMode == Mode.TRIGGERS) {
      if (ScriptApp.getProjectTriggers().length == 0) {
        Logger.log('ScriptApp.newTrigger()');
        ScriptApp.newTrigger('listWithTriggers')
            .timeBased()
            .everyMinutes(10) // 10 minutes
            .create();
      }
    }
  }
}

function isTimeUp_() {
  return new Date() - executionStart > 240000; // 4 minutes
}

const Mode = {
  ONCE:     1,
  TRIGGERS: 2
};

const Item = {
  FILE:   1,
  FOLDER: 2
};

function listFolder_(folder, path) {
  path = path + '/' + folder.getName();
  Logger.log(path + '/');
  var executionRow = getExecutionRow_(folder, path);
  var status = getExecutionStatus_(folder, path, executionRow);

  if (isTimeUp_()) { return false; }
  if (status < 2) {
    var data = [];

    updateExecutionStatus_(folder, path, executionRow, '1 - Listing folder and files…');
    data.push(listItem_(folder, path, Item.FOLDER));
    var files = folder.getFiles();
    var file;
    while (files.hasNext()) {
      data.push(listItem_(files.next(), path, Item.FILE));
    }

    listSheet.getRange(listRow + 1, 1, data.length, data[0].length).setValues(data);
    listRow += data.length;
  }

  if (isTimeUp_()) { return false; }
  if (status < 3) {
    updateExecutionStatus_(folder, path, executionRow, '2 - Listing subfolders…');
    var subFolders = folder.getFolders();
    while (subFolders.hasNext()) {
      listFolder_(subFolders.next(), path);
      if (isTimeUp_()) { return false; }
    }

    updateExecutionStatus_(folder, path, executionRow, '3 - Listed');
  }

  return true;
}

function getExecutionRow_(folder, path) {
  var id = folder.getId();
  var row = executionRowByFolderId.get(id);
  if (row === undefined) {
    row = executionData.length;
    executionRowByFolderId.set(id, row);
  }

  return row;
}

function getExecutionStatus_(folder, path, row) {
  var statusString = executionSheet.getRange(row + 3, 3).getValue();
  return statusString.length == 0 ? -1 : parseInt(statusString[0]);
}

function updateExecutionStatus_(folder, path, row, status) {
  executionData[row] = [
    path + '/',
    folder.getId(),
    status,
    new Date().toLocaleString('en-GB'),
  ];

  executionSheet.getRange(row + 3, 1, 1, 4).setValues([
    executionData[row]
  ]);
}

function listItem_(fileOrFolder, path, item) {
  var name, type;
  if (item == Item.FILE) {
    name = fileOrFolder.getName();
    type = fileOrFolder.getMimeType();
  } else {
    name = null;
    type = 'folder';
  }

  var sharingAccess, sharingPermission;
  try {
    sharingAccess     = fileOrFolder.getSharingAccess();
    sharingPermission = fileOrFolder.getSharingPermission();
  } catch (e) {
    // Exception: The file or folder has invalid access settings.
    sharingAccess     = null;
    sharingPermission = null;
  }

  var contributors, revisions;
  try {
    revisions = Drive.Revisions.list(fileOrFolder.getId());
  } catch (e) {
    // GoogleJsonResponseException: API call to drive.revisions.list failed with error: The authenticated user does not have the required access to the file
  }
  if (revisions && revisions.items) {
    contributors = new Set();
    for (var i = 0; i < revisions.items.length; i++) {
      if (revisions.items[i].lastModifyingUser) {
        contributors.add(revisions.items[i].lastModifyingUser.emailAddress);
      }
    }
    contributors = Array.from(contributors).sort(compareEmails_);
  } else {
    contributors = [];
  }

  var editors = fileOrFolder.getEditors().map(e => e.getEmail()).sort(compareEmails_);
  var viewers = fileOrFolder.getViewers().map(e => e.getEmail()).sort(compareEmails_);

  return [
    path + '/',
    name,
    sharingAccess,
    sharingPermission,
    fileOrFolder.getOwner().getEmail(),
    contributors.toString(),
    editors.toString(),
    viewers.toString(),
    fileOrFolder.getDateCreated(),
    fileOrFolder.getLastUpdated(),
    fileOrFolder.getSize(),
    fileOrFolder.getUrl(),
    type,
  ];
}

function compareEmails_ (a, b) {
  return a.localeCompare(b, 'en', { sensitivity: 'base' });
};
